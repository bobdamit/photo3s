name: Build and Deploy Photo3s

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
  push:
    paths-ignore:
      - '**.md'

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  TF_VERSION: '1.13.3'

jobs:
  # Job 1: Build Docker Image (all branches) and Push to ECR (main only)
  build-docker:
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
      image-tag: ${{ steps.build.outputs.image-tag }}
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if should deploy to ECR
        id: deploy-check
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "🚀 Will push to ECR (main branch or manual trigger)"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "🏗️ Build only (feature branch)"
          fi

      - name: Configure AWS credentials
        if: steps.deploy-check.outputs.should-deploy == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Generate image tag
        id: tag
        run: |
          # Use git SHA for unique, traceable tags
          SHORT_SHA=$(echo $GITHUB_SHA | head -c 8)
          IMAGE_TAG="v${SHORT_SHA}"
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "short-sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v5

      - name: Log in to Amazon ECR
        if: steps.deploy-check.outputs.should-deploy == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if it doesn't exist
        if: steps.deploy-check.outputs.should-deploy == 'true'
        run: |
          ENV=${{ steps.env.outputs.environment }}
          REPO_NAME="photo3s-${ENV}-lambda"
          aws ecr describe-repositories --repository-names $REPO_NAME --region ${{ env.AWS_REGION }} || \
          aws ecr create-repository --repository-name $REPO_NAME --region ${{ env.AWS_REGION }}

      - name: Build Docker image (all branches)
        id: build-local
        env:
          IMAGE_TAG: ${{ steps.tag.outputs.image-tag }}
          ENVIRONMENT: ${{ steps.env.outputs.environment }}
        run: |
          REPO_NAME="photo3s-${ENVIRONMENT}-lambda"
          
          echo "🏗️ Building Docker image locally..."
          docker build -t ${REPO_NAME}:${IMAGE_TAG} .
          docker tag ${REPO_NAME}:${IMAGE_TAG} ${REPO_NAME}:latest
          
          echo "✅ Image built locally: ${REPO_NAME}:${IMAGE_TAG}"

      - name: Push to ECR (main branch only)
        if: steps.deploy-check.outputs.should-deploy == 'true'
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ENVIRONMENT: ${{ steps.env.outputs.environment }}
          IMAGE_TAG: ${{ steps.tag.outputs.image-tag }}
        run: |
          REPO_NAME="photo3s-${ENVIRONMENT}-lambda"
          IMAGE_URI="${ECR_REGISTRY}/${REPO_NAME}:${IMAGE_TAG}"
          
          echo "📤 Tagging for ECR and pushing..."
          docker tag ${REPO_NAME}:${IMAGE_TAG} $IMAGE_URI
          docker tag ${REPO_NAME}:latest ${ECR_REGISTRY}/${REPO_NAME}:latest
          
          docker push $IMAGE_URI
          docker push ${ECR_REGISTRY}/${REPO_NAME}:latest
          
          echo "✅ Image pushed to ECR: $IMAGE_URI"
          echo "image-uri=${IMAGE_URI}" >> $GITHUB_OUTPUT

      - name: Build summary
        run: |
          if [ "${{ steps.deploy-check.outputs.should-deploy }}" = "true" ]; then
            echo "## Docker Build & Push Summary 🐳📤" >> $GITHUB_STEP_SUMMARY
            echo "- **Action:** Build + Push to ECR" >> $GITHUB_STEP_SUMMARY
            echo "- **Image URI:** \`${{ steps.build.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Docker Build Summary 🐳" >> $GITHUB_STEP_SUMMARY  
            echo "- **Action:** Build Only (feature branch)" >> $GITHUB_STEP_SUMMARY
            echo "- **Local Image:** \`photo3s-${{ steps.env.outputs.environment }}-lambda:${{ steps.tag.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Git SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY

  # Job 2: Deploy Infrastructure (only when ECR push happened)
  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: needs.build-docker.outputs.should-deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine environment and action
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "terraform-action=${{ github.event.inputs.action }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "terraform-action=apply" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "terraform-action=plan" >> $GITHUB_OUTPUT
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: terraform
        env:
          TF_VAR_lambda_image_uri: ${{ needs.build-docker.outputs.image-uri }}
        run: |
          terraform plan \
            -var-file="${{ steps.env.outputs.environment }}.tfvars" \
            -out=tfplan \
            -detailed-exitcode
        continue-on-error: true

      - name: Terraform Apply
        if: steps.env.outputs.terraform-action == 'apply' && steps.plan.outcome == 'success'
        working-directory: terraform
        env:
          TF_VAR_lambda_image_uri: ${{ needs.build-docker.outputs.image-uri }}
        run: |
          terraform apply tfplan

      - name: Terraform Destroy
        if: steps.env.outputs.terraform-action == 'destroy'
        working-directory: terraform
        env:
          TF_VAR_lambda_image_uri: ${{ needs.build-docker.outputs.image-uri }}
        run: |
          terraform destroy \
            -var-file="${{ steps.env.outputs.environment }}.tfvars" \
            -auto-approve

      - name: Deployment Summary
        run: |
          echo "## Deployment Summary 🚀" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** \`${{ steps.env.outputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Action:** \`${{ steps.env.outputs.terraform-action }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** \`${{ needs.build-docker.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY