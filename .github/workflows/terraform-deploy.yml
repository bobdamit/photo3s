name: Deploy Photo3s Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  TF_VERSION: '1.6.0'

jobs:
  # Determine environment and validate changes
  prepare:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      terraform-action: ${{ steps.env.outputs.terraform-action }}
    steps:
      - name: Determine environment and action
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "terraform-action=${{ github.event.inputs.action }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "terraform-action=plan" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "terraform-action=apply" >> $GITHUB_OUTPUT
          else
            echo "ERROR: Unsupported event: ${{ github.event_name }} on ${{ github.ref }}" >> $GITHUB_OUTPUT
            exit 1
          fi

  # Test and validate the Lambda code
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test --if-present

      - name: Validate Lambda function syntax
        run: node -c upload-lambda.js

      - name: Check for security vulnerabilities
        run: npm audit --audit-level=high

  # Build and test Docker image
  build:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: photo3s-lambda:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/photo3s-lambda.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/photo3s-lambda.tar
          retention-days: 1

  # Plan infrastructure changes
  plan:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    environment: ${{ needs.prepare.outputs.environment }}
    env:
      ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
    outputs:
      terraform-plan-exitcode: ${{ steps.plan.outputs.exitcode }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/photo3s-lambda.tar

      - name: Get AWS Account ID
        id: aws-account
        run: echo "account-id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ steps.aws-account.outputs.account-id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init

      - name: Select or create Terraform workspace
        working-directory: terraform
        run: |
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}

      - name: Get ECR repository name from Terraform
        id: ecr-info
        working-directory: terraform
        run: |
          # Apply minimal changes to ensure ECR repo exists
          terraform apply -target=aws_ecr_repository.lambda_repo -var-file="${{ env.ENVIRONMENT }}.tfvars" -auto-approve
          
          # Get ECR repository details
          ECR_REPO_NAME=$(terraform output -raw ecr_repository_name)
          ECR_REPO_URL=$(terraform output -raw ecr_repository_url)
          echo "ecr-repo-name=$ECR_REPO_NAME" >> $GITHUB_OUTPUT
          echo "ecr-repo-url=$ECR_REPO_URL" >> $GITHUB_OUTPUT

      - name: Tag and push Docker image to ECR
        run: |
          # Tag the image for ECR using the repository name from Terraform
          docker tag photo3s-lambda:${{ github.sha }} ${{ steps.ecr-info.outputs.ecr-repo-url }}:latest
          
          # Push to ECR
          docker push ${{ steps.ecr-info.outputs.ecr-repo-url }}:latest

      - name: Terraform Plan
        id: plan
        working-directory: terraform
        continue-on-error: true
        run: |
          terraform plan \
            -var-file="${{ env.ENVIRONMENT }}.tfvars" \
            -out=tfplan-${{ env.ENVIRONMENT }} \
            -detailed-exitcode

      - name: Upload Terraform plan
        uses: actions/upload-artifact@v4
        if: steps.plan.outputs.exitcode == 2
        with:
          name: tfplan-${{ env.ENVIRONMENT }}
          path: terraform/tfplan-${{ env.ENVIRONMENT }}
          retention-days: 5

      - name: Comment PR with plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/tfplan-${{ env.ENVIRONMENT }}', 'utf8');
            
            const output = `#### Terraform Plan for \`${{ env.ENVIRONMENT }}\` ðŸ“–
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${plan}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  # Deploy infrastructure
  deploy:
    runs-on: ubuntu-latest
    needs: [prepare, plan]
    if: needs.prepare.outputs.terraform-action == 'apply' && (needs.plan.outputs.terraform-plan-exitcode == '2' || needs.plan.outputs.terraform-plan-exitcode == '0')
    environment: 
      name: ${{ needs.prepare.outputs.environment }}
      url: ${{ steps.deploy.outputs.lambda-console-url }}
    env:
      ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
    outputs:
      lambda-function-name: ${{ steps.deploy.outputs.lambda-function-name }}
      source-buckets: ${{ steps.deploy.outputs.source-buckets }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/photo3s-lambda.tar

      - name: Get AWS Account ID
        id: aws-account
        run: echo "account-id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ steps.aws-account.outputs.account-id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init

      - name: Select Terraform workspace
        working-directory: terraform
        run: terraform workspace select ${{ env.ENVIRONMENT }}

      - name: Get ECR repository info from Terraform
        id: ecr-info
        working-directory: terraform
        run: |
          ECR_REPO_URL=$(terraform output -raw ecr_repository_url)
          echo "ecr-repo-url=$ECR_REPO_URL" >> $GITHUB_OUTPUT

      - name: Tag and push Docker image to ECR
        run: |
          # Tag the image for ECR using the repository URL from Terraform
          docker tag photo3s-lambda:${{ github.sha }} ${{ steps.ecr-info.outputs.ecr-repo-url }}:latest
          
          # Push to ECR  
          docker push ${{ steps.ecr-info.outputs.ecr-repo-url }}:latest

      - name: Download Terraform plan
        uses: actions/download-artifact@v4
        if: needs.plan.outputs.terraform-plan-exitcode == '2'
        with:
          name: tfplan-${{ env.ENVIRONMENT }}
          path: terraform

      - name: Apply Terraform changes
        id: deploy
        working-directory: terraform
        run: |
          if [ -f "tfplan-${{ env.ENVIRONMENT }}" ]; then
            echo "Applying saved plan..."
            terraform apply tfplan-${{ env.ENVIRONMENT }}
          else
            echo "No changes to apply"
          fi
          
          # Get outputs
          echo "lambda-function-name=$(terraform output -raw lambda_function_name)" >> $GITHUB_OUTPUT
          echo "source-buckets=$(terraform output -json ingress_buckets)" >> $GITHUB_OUTPUT
          
          # Create console URL
          FUNCTION_NAME=$(terraform output -raw lambda_function_name)
          echo "lambda-console-url=https://console.aws.amazon.com/lambda/home?region=${{ env.AWS_REGION }}#/functions/$FUNCTION_NAME" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        env:
          LAMBDA_FUNCTION_NAME: ${{ steps.deploy.outputs.lambda-function-name }}
        run: |
          echo "Running smoke tests..."
          # Test Lambda function exists
          aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME
          echo "âœ… Lambda function is accessible"
          
          # Test CloudWatch logs exist
          aws logs describe-log-groups --log-group-name-prefix "/aws/lambda/$LAMBDA_FUNCTION_NAME"
          echo "âœ… CloudWatch logs configured"

  # Destroy infrastructure (manual trigger only)
  destroy:
    runs-on: ubuntu-latest
    needs: [prepare]
    if: needs.prepare.outputs.terraform-action == 'destroy'
    environment: 
      name: ${{ needs.prepare.outputs.environment }}-destroy
    env:
      ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init

      - name: Select Terraform workspace
        working-directory: terraform
        run: terraform workspace select ${{ env.ENVIRONMENT }}

      - name: Destroy infrastructure
        working-directory: terraform
        run: |
          terraform destroy \
            -var-file="${{ env.ENVIRONMENT }}.tfvars" \
            -auto-approve

      - name: Delete Terraform workspace
        working-directory: terraform
        run: |
          terraform workspace select default
          terraform workspace delete ${{ env.ENVIRONMENT }}