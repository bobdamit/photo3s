name: Deploy Photo Processing Lambda

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME || 'phot3s-upload-lambda' }}
  # S3 bucket configuration - set these in GitHub Variables (not secrets since they're not sensitive)
  ALLOWED_SOURCE_BUCKETS: ${{ vars.ALLOWED_SOURCE_BUCKETS || '' }}
  PROCESSED_BUCKET: ${{ vars.PROCESSED_BUCKET || '' }}
  PROCESSED_PREFIX: ${{ vars.PROCESSED_PREFIX || 'processed/' }}
  DELETE_ORIGINAL: ${{ vars.DELETE_ORIGINAL || 'false' }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests (if any)
      run: npm test || echo "No tests defined, skipping"
      
    - name: Validate Lambda function syntax
      run: node -c upload-lambda.js

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --production
      
    - name: Validate required secrets
      run: |
        echo "üîç Validating required secrets..."
        
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "‚ùå AWS_ACCESS_KEY_ID secret is not set"
          exit 1
        fi
        
        if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "‚ùå AWS_SECRET_ACCESS_KEY secret is not set"
          exit 1
        fi
        
        echo "‚úÖ Required secrets are configured"
        echo "Region: ${{ env.AWS_REGION }}"
        echo "Function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Create or get Lambda execution role
      id: lambda-role
      run: |
        echo "üîç STEP: IAM Role Management"
        echo "=============================="
        echo "This step creates the IAM role that allows Lambda to:"
        echo "  ‚Ä¢ Execute and write CloudWatch logs"
        echo "  ‚Ä¢ Read/write to S3 buckets for photo processing"
        echo "  ‚Ä¢ Access EXIF metadata and image processing libraries"
        echo ""
        
        ROLE_NAME="lambda-execution-role"
        echo "üîé Checking if IAM role '$ROLE_NAME' exists..."
        
        # Check if role exists
        if aws iam get-role --role-name $ROLE_NAME &>/dev/null; then
          echo "‚úÖ FOUND: Role '$ROLE_NAME' already exists"
          ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query 'Role.Arn' --output text)
          echo "üìã Role ARN: $ROLE_ARN"
          
          # Check attached policies
          echo "üîç Verifying role has required policies..."
          aws iam list-attached-role-policies --role-name $ROLE_NAME --output table
          aws iam list-role-policies --role-name $ROLE_NAME --output table
          
          # Update S3 policy for existing role (in case buckets changed)
          echo "üîÑ Updating S3 policy for existing role..."
          
          # Generate the same S3 policy as we do for new roles
          if [ -n "${{ env.ALLOWED_SOURCE_BUCKETS }}" ]; then
            # Parse comma-separated bucket list
            IFS=',' read -ra BUCKETS <<< "${{ env.ALLOWED_SOURCE_BUCKETS }}"
            echo "   Configuring for specific buckets: ${{ env.ALLOWED_SOURCE_BUCKETS }}"
            BUCKET_RESOURCES=""
            BUCKET_LIST_RESOURCES=""
            for bucket in "${BUCKETS[@]}"; do
              bucket=$(echo "$bucket" | xargs) # trim whitespace
              # Add object-level resources
              if [ -z "$BUCKET_RESOURCES" ]; then
                BUCKET_RESOURCES="\"arn:aws:s3:::${bucket}/*\""
                BUCKET_LIST_RESOURCES="\"arn:aws:s3:::${bucket}\""
              else
                BUCKET_RESOURCES="${BUCKET_RESOURCES},\"arn:aws:s3:::${bucket}/*\""
                BUCKET_LIST_RESOURCES="${BUCKET_LIST_RESOURCES},\"arn:aws:s3:::${bucket}\""
              fi
            done
            
            # Add processed bucket if different
            if [ -n "${{ env.PROCESSED_BUCKET }}" ] && [ "${{ env.PROCESSED_BUCKET }}" != "null" ]; then
              BUCKET_RESOURCES="${BUCKET_RESOURCES},\"arn:aws:s3:::${{ env.PROCESSED_BUCKET }}/*\""
              BUCKET_LIST_RESOURCES="${BUCKET_LIST_RESOURCES},\"arn:aws:s3:::${{ env.PROCESSED_BUCKET }}\""
              echo "   Added processed bucket: ${{ env.PROCESSED_BUCKET }}"
            fi
          else
            echo "   No specific buckets configured - allowing access to any bucket (less secure)"
            BUCKET_RESOURCES="\"arn:aws:s3:::*/*\""
            BUCKET_LIST_RESOURCES="\"arn:aws:s3:::*\""
          fi
          
          echo "   Bucket object resources: $BUCKET_RESOURCES"
          echo "   Bucket list resources: $BUCKET_LIST_RESOURCES"
          
          cat > s3-policy-update.json << EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:GetObjectMetadata",
                "s3:GetObjectAttributes"
              ],
              "Resource": [
                $BUCKET_RESOURCES
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket"
              ],
              "Resource": [
                $BUCKET_LIST_RESOURCES
              ]
            }
          ]
        }
        EOF
          
          echo "üìÑ Updated S3 policy:"
          cat s3-policy-update.json
          
          echo "üîó Updating S3 policy on existing role..."
          aws iam put-role-policy \
            --role-name $ROLE_NAME \
            --policy-name S3PhotoProcessingPolicy \
            --policy-document file://s3-policy-update.json
          echo "‚úÖ S3 access policy updated"
        else
          echo "üÜï CREATING: Lambda execution role (this is normal for first deployment)"
          echo "üìù This role will have these permissions:"
          echo "   1. AWSLambdaBasicExecutionRole (AWS managed - for CloudWatch logs)"
          echo "   2. S3PhotoProcessingPolicy (custom - for S3 bucket access)"
          echo ""
          
          # Create trust policy document
          echo "üìÑ Creating trust policy (allows Lambda service to assume this role)..."
          cat > trust-policy.json << 'EOF'
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
        EOF
          echo "‚úÖ Trust policy created"
          
          # Create the role
          echo "üõ†Ô∏è  Creating IAM role '$ROLE_NAME'..."
          aws iam create-role \
            --role-name $ROLE_NAME \
            --assume-role-policy-document file://trust-policy.json \
            --description "Execution role for photo processing Lambda function - auto-created by GitHub Actions"
          echo "‚úÖ IAM role created successfully"
          
          # Attach basic Lambda execution policy
          echo "üîó Attaching AWS managed policy: AWSLambdaBasicExecutionRole"
          echo "   This allows Lambda to write logs to CloudWatch"
          aws iam attach-role-policy \
            --role-name $ROLE_NAME \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          echo "‚úÖ Basic execution policy attached"
          
          # Create and attach S3 access policy
          echo "üìù Creating dynamic S3 access policy..."
          
          # Determine bucket resources from environment variables
          if [ -n "${{ env.ALLOWED_SOURCE_BUCKETS }}" ]; then
            # Parse comma-separated bucket list
            IFS=',' read -ra BUCKETS <<< "${{ env.ALLOWED_SOURCE_BUCKETS }}"
            echo "   Configuring for specific buckets: ${{ env.ALLOWED_SOURCE_BUCKETS }}"
            BUCKET_RESOURCES=""
            BUCKET_LIST_RESOURCES=""
            for bucket in "${BUCKETS[@]}"; do
              bucket=$(echo "$bucket" | xargs) # trim whitespace
              # Add object-level resources
              if [ -z "$BUCKET_RESOURCES" ]; then
                BUCKET_RESOURCES="\"arn:aws:s3:::${bucket}/*\""
                BUCKET_LIST_RESOURCES="\"arn:aws:s3:::${bucket}\""
              else
                BUCKET_RESOURCES="${BUCKET_RESOURCES},\"arn:aws:s3:::${bucket}/*\""
                BUCKET_LIST_RESOURCES="${BUCKET_LIST_RESOURCES},\"arn:aws:s3:::${bucket}\""
              fi
            done
            
            # Add processed bucket if different
            if [ -n "${{ env.PROCESSED_BUCKET }}" ] && [ "${{ env.PROCESSED_BUCKET }}" != "null" ]; then
              BUCKET_RESOURCES="${BUCKET_RESOURCES},\"arn:aws:s3:::${{ env.PROCESSED_BUCKET }}/*\""
              BUCKET_LIST_RESOURCES="${BUCKET_LIST_RESOURCES},\"arn:aws:s3:::${{ env.PROCESSED_BUCKET }}\""
              echo "   Added processed bucket: ${{ env.PROCESSED_BUCKET }}"
            fi
          else
            echo "   No specific buckets configured - allowing access to any bucket (less secure)"
            BUCKET_RESOURCES="\"arn:aws:s3:::*/*\""
            BUCKET_LIST_RESOURCES="\"arn:aws:s3:::*\""
          fi
          
          echo "   Bucket object resources: $BUCKET_RESOURCES"
          echo "   Bucket list resources: $BUCKET_LIST_RESOURCES"
          
          cat > s3-policy.json << EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:GetObjectMetadata",
                "s3:GetObjectAttributes"
              ],
              "Resource": [
                $BUCKET_RESOURCES
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket"
              ],
              "Resource": [
                $BUCKET_LIST_RESOURCES
              ]
            }
          ]
        }
        EOF
          
          echo "üìÑ Generated S3 policy:"
          cat s3-policy.json
          
          echo "üîó Attaching custom S3 policy to role..."
          aws iam put-role-policy \
            --role-name $ROLE_NAME \
            --policy-name S3PhotoProcessingPolicy \
            --policy-document file://s3-policy.json
          echo "‚úÖ S3 access policy attached"
          
          # Get the role ARN
          ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query 'Role.Arn' --output text)
          echo "üìã New Role ARN: $ROLE_ARN"
          
          echo "‚úÖ COMPLETE: Role created with all required permissions"
          
          # Wait for role to propagate
          echo "‚è≥ IMPORTANT: Waiting 15 seconds for IAM role to propagate across AWS..."
          echo "   (This prevents 'role cannot be assumed' errors during Lambda creation)"
          sleep 15
          echo "‚úÖ Role propagation wait complete"
        fi
        
        echo ""
        echo "üéØ RESULT: Lambda execution role is ready"
        echo "   Role Name: $ROLE_NAME"
        echo "   Role ARN: $ROLE_ARN"
        echo "   Permissions: Lambda execution + S3 read/write access"
        echo ""
        echo "role-arn=$ROLE_ARN" >> $GITHUB_OUTPUT
        
    - name: Create deployment package
      run: |
        echo "üì¶ STEP: Creating Lambda Deployment Package"
        echo "============================================"
        echo "This creates a ZIP file containing:"
        echo "  ‚Ä¢ upload-lambda.js (main photo processing code)"
        echo "  ‚Ä¢ node_modules/ (sharp, exif-parser, aws-sdk dependencies)"
        echo "  ‚Ä¢ package.json (dependency manifest)"
        echo ""
        
        echo "üìÅ Files being packaged:"
        ls -la upload-lambda.js package.json
        echo ""
        echo "üìö Key dependencies:"
        npm list --depth=0 2>/dev/null || echo "   (dependencies installed successfully)"
        echo ""
        
        echo "üóúÔ∏è  Creating ZIP archive..."
        zip -r photo-lambda.zip upload-lambda.js node_modules/ package.json
        
        echo "üìä Package size:"
        ls -lh photo-lambda.zip
        
        echo "‚úÖ Deployment package ready"
        echo ""
        
    - name: Check if Lambda function exists
      id: check-function
      run: |
        echo "üîç STEP: Lambda Function Discovery"
        echo "=================================="
        echo "Checking if Lambda function '${{ env.LAMBDA_FUNCTION_NAME }}' exists..."
        echo "This determines whether to CREATE new function or UPDATE existing one"
        echo ""
        
        if aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} &>/dev/null; then
          echo "‚úÖ FOUND: Function '${{ env.LAMBDA_FUNCTION_NAME }}' exists"
          echo "üìã Current function details:"
          aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --query '{Runtime:Configuration.Runtime,MemorySize:Configuration.MemorySize,Timeout:Configuration.Timeout,LastModified:Configuration.LastModified}' \
            --output table
          
          echo "function-exists=true" >> $GITHUB_OUTPUT
          echo "üéØ RESULT: Will UPDATE existing function code"
        else
          echo "‚ùå NOT FOUND: Function '${{ env.LAMBDA_FUNCTION_NAME }}' does not exist"
          echo "function-exists=false" >> $GITHUB_OUTPUT  
          echo "üéØ RESULT: Will CREATE new function"
        fi
        echo ""
        
    - name: Update Lambda function code
      if: steps.check-function.outputs.function-exists == 'true'
      run: |
        echo "üîÑ STEP: Updating Existing Lambda Function"
        echo "=========================================="
        echo "Function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        echo "Action: Update code only (keeping existing configuration)"
        echo "Package: photo-lambda.zip"
        echo ""
        
        echo "üì§ Uploading new code to existing Lambda function..."
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --zip-file fileb://photo-lambda.zip
        
        echo "‚úÖ Code update complete"
        
        echo "üìã Updated function details:"
        aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --query '{FunctionName:Configuration.FunctionName,Runtime:Configuration.Runtime,LastModified:Configuration.LastModified,CodeSize:Configuration.CodeSize}' \
          --output table
        echo ""
        
    - name: Create Lambda function
      if: steps.check-function.outputs.function-exists == 'false'
      run: |
        echo "üÜï STEP: Creating New Lambda Function"
        echo "====================================="
        echo "This is the first deployment - creating Lambda function from scratch"
        echo ""
        echo "üìã Function Configuration:"
        echo "   Name: ${{ env.LAMBDA_FUNCTION_NAME }}"
        echo "   Runtime: nodejs18.x"
        echo "   Handler: upload-lambda.handler (main function)"
        echo "   Memory: 512 MB (good for image processing)"
        echo "   Timeout: 60 seconds (enough for large photos)"
        echo "   Role: ${{ steps.lambda-role.outputs.role-arn }}"
        echo ""
        echo "üéØ Function Purpose:"
        echo "   ‚Ä¢ Processes uploaded photos (JPG, PNG, TIFF, WebP)"
        echo "   ‚Ä¢ Creates multiple sizes (small, medium, large)" 
        echo "   ‚Ä¢ Extracts EXIF metadata (camera, GPS, date)"
        echo "   ‚Ä¢ Renames files based on shot date"
        echo "   ‚Ä¢ Generates JSON metadata files"
        echo ""
        
        echo "üõ†Ô∏è  Creating Lambda function..."
        aws lambda create-function \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --runtime nodejs18.x \
          --role ${{ steps.lambda-role.outputs.role-arn }} \
          --handler upload-lambda.handler \
          --zip-file fileb://photo-lambda.zip \
          --timeout 60 \
          --memory-size 512 \
          --description "Photo processing Lambda - creates multiple sizes and extracts metadata [Auto-deployed by GitHub Actions]"
        
        echo "‚úÖ Lambda function created successfully"
        
        echo "üìã New function details:"
        aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --query '{FunctionName:Configuration.FunctionName,State:Configuration.State,Runtime:Configuration.Runtime,MemorySize:Configuration.MemorySize}' \
          --output table
        echo ""
        
    - name: Configure Lambda environment variables
      run: |
        echo "üîß STEP: Configuring Lambda Environment Variables"
        echo "================================================="
        echo "Setting up multi-bucket configuration for flexible deployment..."
        echo ""
        
        # Wait for function to be ready before attempting environment variable update
        echo "‚è≥ Waiting for Lambda function to be ready for configuration updates..."
        MAX_WAIT_ATTEMPTS=12
        WAIT_ATTEMPT=1
        
        while [ $WAIT_ATTEMPT -le $MAX_WAIT_ATTEMPTS ]; do
          FUNCTION_STATE=$(aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --query 'Configuration.State' --output text 2>/dev/null || echo "Unknown")
          echo "   Wait attempt $WAIT_ATTEMPT/$MAX_WAIT_ATTEMPTS - Function State: $FUNCTION_STATE"
          
          if [ "$FUNCTION_STATE" = "Active" ]; then
            echo "   ‚úÖ Function is ready for configuration updates"
            break
          elif [ "$FUNCTION_STATE" = "Failed" ]; then
            echo "   ‚ùå Function is in Failed state - cannot proceed"
            exit 1
          else
            if [ $WAIT_ATTEMPT -eq $MAX_WAIT_ATTEMPTS ]; then
              echo "   ‚ö†Ô∏è  Function is still not Active after 3 minutes"
              echo "   Current state: $FUNCTION_STATE"
              echo "   Proceeding anyway - the update may succeed"
              break
            fi
            echo "   ‚è≥ State: $FUNCTION_STATE - waiting 15 seconds..."
            sleep 15
          fi
          
          WAIT_ATTEMPT=$((WAIT_ATTEMPT + 1))
        done
        echo ""
        
        # Build environment variables JSON
        ENV_VARS="{"
        
        # Add bucket configuration
        if [ -n "${{ env.ALLOWED_SOURCE_BUCKETS }}" ]; then
          echo "‚úÖ ALLOWED_SOURCE_BUCKETS: ${{ env.ALLOWED_SOURCE_BUCKETS }}"
          ENV_VARS="${ENV_VARS}\"ALLOWED_SOURCE_BUCKETS\":\"${{ env.ALLOWED_SOURCE_BUCKETS }}\""
        else
          echo "‚ÑπÔ∏è  ALLOWED_SOURCE_BUCKETS: Not set (allows any bucket)"
        fi
        
        if [ -n "${{ env.PROCESSED_BUCKET }}" ] && [ "${{ env.PROCESSED_BUCKET }}" != "null" ]; then
          if [ "$ENV_VARS" != "{" ]; then ENV_VARS="${ENV_VARS},"; fi
          ENV_VARS="${ENV_VARS}\"PROCESSED_BUCKET\":\"${{ env.PROCESSED_BUCKET }}\""
          echo "‚úÖ PROCESSED_BUCKET: ${{ env.PROCESSED_BUCKET }}"
        else
          echo "‚ÑπÔ∏è  PROCESSED_BUCKET: Not set (uses same bucket as source)"
        fi
        
        if [ "$ENV_VARS" != "{" ]; then ENV_VARS="${ENV_VARS},"; fi
        ENV_VARS="${ENV_VARS}\"PROCESSED_PREFIX\":\"${{ env.PROCESSED_PREFIX }}\""
        echo "‚úÖ PROCESSED_PREFIX: ${{ env.PROCESSED_PREFIX }}"
        
        if [ "$ENV_VARS" != "{" ]; then ENV_VARS="${ENV_VARS},"; fi
        ENV_VARS="${ENV_VARS}\"DELETE_ORIGINAL\":\"${{ env.DELETE_ORIGINAL }}\""
        echo "‚úÖ DELETE_ORIGINAL: ${{ env.DELETE_ORIGINAL }}"
        
        if [ "$ENV_VARS" != "{" ]; then ENV_VARS="${ENV_VARS},"; fi
        ENV_VARS="${ENV_VARS}\"SKIP_PROCESSED_FOLDER\":\"true\""
        echo "‚úÖ SKIP_PROCESSED_FOLDER: true"
        
        ENV_VARS="${ENV_VARS}}"
        
        echo ""
        echo "üîÑ Updating Lambda environment variables..."
        echo "Environment JSON: $ENV_VARS"
        
        # Create the full CLI input JSON
        CLI_JSON="{\"FunctionName\":\"${{ env.LAMBDA_FUNCTION_NAME }}\",\"Environment\":{\"Variables\":$ENV_VARS}}"
        echo "CLI JSON: $CLI_JSON"
        
        # Write to temp file and use cli-input-json with retry logic
        echo "$CLI_JSON" > /tmp/lambda-update.json
        
        # Retry logic for ResourceConflictException
        MAX_RETRIES=5
        RETRY_COUNT=0
        RETRY_DELAY=10
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES: Updating environment variables..."
          
          if aws lambda update-function-configuration --cli-input-json file:///tmp/lambda-update.json; then
            echo "‚úÖ Environment variables updated successfully"
            break
          else
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 254 ]; then
              echo "‚ö†Ô∏è  ResourceConflictException: Another update is in progress"
              if [ $RETRY_COUNT -lt $((MAX_RETRIES - 1)) ]; then
                echo "   Waiting ${RETRY_DELAY} seconds before retry..."
                sleep $RETRY_DELAY
                RETRY_COUNT=$((RETRY_COUNT + 1))
                RETRY_DELAY=$((RETRY_DELAY + 5))  # Increase delay each retry
              else
                echo "‚ùå Max retries reached. The function may still be updating from a previous deployment."
                echo "   This is often normal - the function should become available shortly."
                echo "   You can check the function status in the AWS Console."
                exit 1
              fi
            else
              echo "‚ùå Failed with exit code $EXIT_CODE (not a ResourceConflictException)"
              exit $EXIT_CODE
            fi
          fi
        done
        
        echo "‚úÖ Environment variables configured successfully"
        echo ""
        echo "üìã Current Lambda environment:"
        aws lambda get-function-configuration \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --query 'Environment.Variables' \
          --output table
          
        echo ""
        
    - name: Run deployment verification
      run: |
        echo "üîç STEP: Deployment Verification"
        echo "================================"
        echo "Running post-deployment checks to ensure everything is working..."
        echo ""
        
        # Check function status with retry logic
        echo "üè• Health Check: Lambda Function Status"
        echo "‚è≥ Waiting for Lambda function to become active (this can take 30-60 seconds)..."
        
        MAX_ATTEMPTS=12
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          FUNCTION_STATE=$(aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --query 'Configuration.State' --output text)
          echo "   Attempt $ATTEMPT/$MAX_ATTEMPTS - Current State: $FUNCTION_STATE"
          
          if [ "$FUNCTION_STATE" = "Active" ]; then
            echo "   ‚úÖ HEALTHY: Lambda function is active and ready to process photos"
            break
          elif [ "$FUNCTION_STATE" = "Failed" ]; then
            echo "   ‚ùå FAILED: Lambda function failed to initialize"
            echo "   Check the function configuration and IAM role permissions"
            exit 1
          else
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "   ‚ùå TIMEOUT: Function did not become active within 3 minutes"
              echo "   Current state: $FUNCTION_STATE"
              echo "   This may be normal - check AWS Console for function status"
              echo "   The function might still be initializing successfully"
              exit 1
            fi
            echo "   ‚è≥ State: $FUNCTION_STATE - waiting 15 seconds before retry..."
            sleep 15
          fi
          
          ATTEMPT=$((ATTEMPT + 1))
        done
        
        echo ""
        echo "üìä Function Summary:"
        aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --query '{FunctionName:Configuration.FunctionName,Runtime:Configuration.Runtime,State:Configuration.State,LastModified:Configuration.LastModified,CodeSize:Configuration.CodeSize,MemorySize:Configuration.MemorySize,Timeout:Configuration.Timeout}' \
          --output table
        
        echo ""
        echo "üéØ DEPLOYMENT SUCCESS!"
        echo "====================="
        echo "Your photo processing Lambda is now deployed and ready to use."
        echo ""
        echo "üìã What was deployed:"
        echo "   ‚Ä¢ Lambda Function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        echo "   ‚Ä¢ IAM Role: lambda-execution-role (with S3 + CloudWatch permissions)"
        echo "   ‚Ä¢ Runtime: Node.js 18.x with sharp, exif-parser libraries"
        echo "   ‚Ä¢ Memory: 512MB, Timeout: 60 seconds"
        echo ""
        echo "üöÄ Next Steps (Manual Configuration Required):"
        echo "   1. Configure S3 bucket triggers via AWS Console"
        echo "   2. Set Lambda environment variables for multi-bucket setup"
        echo "   3. Upload test photos to trigger processing"
        echo "   4. Check CloudWatch logs for processing results"
        echo ""
        echo "üìö Documentation:"
        echo "   ‚Ä¢ Multi-bucket setup: See MULTI_BUCKET.md in this repo"
        echo "   ‚Ä¢ S3 trigger setup: See README.md in this repo"
        echo "   ‚Ä¢ Troubleshooting: Check CloudWatch logs at /aws/lambda/${{ env.LAMBDA_FUNCTION_NAME }}"
        echo ""

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Notify deployment result
      run: |
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "üéâ Deployment successful!"
          echo "Lambda function ${{ env.LAMBDA_FUNCTION_NAME }} has been deployed"
          echo ""
          echo "Next steps:"
          echo "1. Configure S3 bucket triggers via AWS Console"
          echo "2. Set Lambda environment variables for multi-bucket setup"
          echo "3. Upload test photos to trigger processing"
        else
          echo "‚ùå Deployment failed!"
          echo "Check the workflow logs for details"
          exit 1
        fi